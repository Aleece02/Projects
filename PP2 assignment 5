import java.util.Scanner;
import java.util.Comparator;
import java.util.Arrays;

public class A5p1 {
    public static void main(String[] args) {
    	if (args.length < 1) {
       System.out.println("Please provide the number of persons as a command line argument.");
       return;
      }
         
    	int numPersons = Integer.parseInt(args[0]);
    	Person[] persons = new Person[numPersons];
        Scanner scanner = new Scanner(System.in);
          
         
          
    	   for (int i = 0; i < numPersons; i++) {
               System.out.println("\nEnter information for person " + (i + 1) + ":");
               System.out.print("Name: ");
               String name = scanner.nextLine();
               
               System.out.print("Sex('F' or 'M'): ");
               String sex = scanner.nextLine();
               if (sex.equalsIgnoreCase("F")) {
               	sex = "female";
               } else if (sex.equalsIgnoreCase("M")) {
               	sex = "male";
               } else {
               	 System.out.println("Invalid type. Skipping person.");
                    continue;
               }
               
               System.out.print("Age: ");
               int age = Integer.parseInt(scanner.nextLine());
               
               System.out.print("Singer or Dancer('S' or 'D'): ");
               String type = scanner.nextLine();
               
               if (type.equalsIgnoreCase("Singer") || type.equalsIgnoreCase("S")) {
                   System.out.print("Favorite song: ");
                   String song = scanner.nextLine();
                   
                   persons[i] = new Singer(name, sex, age, song);
               } else if (type.equalsIgnoreCase("Dancer") || type.equalsIgnoreCase("D")) {
                   System.out.print("Favorite dance: ");
                   String dance = scanner.nextLine();
                   
                   persons[i] = new Dancer(name, sex, age, dance);
               } else {
                   System.out.println("Invalid type entered. Skipping person.");
               }
           }
           
    	   System.out.println("\nThe persons you entered are:");
           displayPersons(persons);
           
           System.out.print("\nSort by age or name('A' or 'N'): ");
           String sortBy = scanner.nextLine();
           if (sortBy.equalsIgnoreCase("A")) {
        	   sortBy = "age";
        	   System.out.println("All the persons sorted by "+ sortBy  + " are:");
               sortPersonsByAge(persons);
               displayPersons(persons);
           } else if (sortBy.equalsIgnoreCase("N")) {
        	   sortBy = "name";
        	   System.out.println("All the persons sorted by " + sortBy  + " are:");
               sortPersonsByName(persons);
               displayPersons(persons);
               
           } else {
               System.out.println("Invalid option entered. Displaying unsorted list.");
           }
           
         
           
           scanner.close();
       }
       
       public static void displayPersons(Person[] persons) {
           for (Person person : persons) {
               System.out.println(person);
               
           }
       }
       public static void sortPersonsByAge(Person[] persons) {
           for (int i = 0; i < persons.length - 1; i++) {
               for (int j = 0; j < persons.length - i - 1; j++) {
                   if (persons[j].getAge() > persons[j + 1].getAge()) {
                       Person temp = persons[j];
                       persons[j] = persons[j + 1];
                       persons[j + 1] = temp;
                   }
               }
           }
       }

       public static void sortPersonsByName(Person[] persons) {
           for (int i = 0; i < persons.length - 1; i++) {
               for (int j = 0; j < persons.length - i - 1; j++) {
                   if (persons[j].getName().compareToIgnoreCase(persons[j + 1].getName()) > 0) {
                       Person temp = persons[j];
                       persons[j] = persons[j + 1];
                       persons[j + 1] = temp;
                   }
               }
           }
       }
   }
       

   abstract class Person implements Comparable<Person> {
        String name;
        String sex;
        int age;
       
       public Person(String name, String sex, int age) {
           this.name = name;
           this.sex = sex;
           this.age = age;
       }
       
       public String getName() {
           return name;
       }
       
       public String getSex() {
           return sex;
       }
       
       public int getAge() {
           return age;
       }
       
       @Override
       public int compareTo(Person other) {
           return this.name.compareTo(other.name);
       }
       
       @Override
       public String toString() {
           return name + " is a " + sex + " " + getClass().getSimpleName().toLowerCase() +
                   " of " + age + " years old";
       }
   }

   class Singer extends Person {
       private String favoriteSong;
       
       public Singer(String name, String sex, int age, String favoriteSong) {
           super(name, sex, age);
           this.favoriteSong = favoriteSong;
       }
       
       @Override
       public String toString() {
           return super.toString() + " with favorite song " + favoriteSong + ".";
       }
   }

   class Dancer extends Person {
       private String favoriteDance;
       
       public Dancer(String name, String sex, int age, String favoriteDance) {
           super(name, sex, age);
           this.favoriteDance = favoriteDance;
       }
       
       @Override
       public String toString() {
           return super.toString() + " with favorite dance " + favoriteDance + ".";
       }
   }   
