public class A2p1 {
	private static int a;
    private static int b;
    private static int n;
    private static int countA = 0;
    private static int countB = 0;
    private static final Object lock = new Object();
	public static void main(String[] args) {
		
		
			a = Integer.parseInt(args[0]);
	        b = Integer.parseInt(args[1]);
	        n = Integer.parseInt(args[2]);

	        if (a >= b || n < 2 || n > 6) {
	            System.out.println("Invalid input. Please ensure a < b and n between 2 and 6.");
	            return;
	        }

	        int range = b - a + 1;
	        int numbersPerThread = range / n;

	        Thread[] threads = new Thread[n];
	        for (int i = 0; i < n; i++) {
	            int start = a + i * numbersPerThread;
	            int end = i == n - 1 ? b : start + numbersPerThread - 1;
	            threads[i] = new Thread(new CollatzCounter(start, end));
	            threads[i].start();
	        }

	        try {
	            for (Thread thread : threads) {
	                thread.join();
	            }
	        } catch (InterruptedException e) {
	            e.printStackTrace();
	        }

	        System.out.println("Using " + n + " threads.");
	        System.out.println("Count for (A) is " + countA + ".");
	        System.out.println("Count for (B) is " + countB + ".");
	    }
	
	 static class CollatzCounter implements Runnable {
	        private int start;
	        private int end;

	        CollatzCounter(int start, int end) {
	            this.start = start;
	            this.end = end;
	        }

	        @Override
	        public void run() {
	            for (int i = start; i <= end; i++) {
	                int collatzLength = calculateCollatzLength(i);
	                synchronized (lock) {
	                    if (collatzLength % 2 == 0) {
	                        countA++;
	                    } else {
	                        countB++;
	                    }
	                }
	            }
	        }

	        private int calculateCollatzLength(int x) {
	            int length = 1;
	            while (x != 1) {
	                if (x % 2 == 0) {
	                    x /= 2;
	                } else {
	                    x = (3 * x + 1) / 2;
	                }
	                length++;
	            }
	            return length;
	        }
	    }
	}
